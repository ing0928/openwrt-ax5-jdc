# 设置目标平台为 qualcommax
CONFIG_TARGET_qualcommax=y

# 设置目标平台子类型为 ipq60xx
CONFIG_TARGET_qualcommax_ipq60xx=y

# 启用多配置文件支持
CONFIG_TARGET_MULTI_PROFILE=y

# 设置目标设备为 Redmi AX5-JDCloud（IPQ60xx平台）
CONFIG_TARGET_DEVICE_qualcommax_ipq60xx_DEVICE_redmi_ax5-jdcloud=y

# 启用 BusyBox 自定义配置
CONFIG_BUSYBOX_CUSTOM=y

# 为每个设备启用独立的根文件系统
CONFIG_TARGET_PER_DEVICE_ROOTFS=y

# 禁用 ATH11K 1G 内存配置文件（不使用）
# CONFIG_ATH11K_MEM_PROFILE_1G is not set

# 启用 ATH11K 512M 内存配置文件
CONFIG_ATH11K_MEM_PROFILE_512M=y

# 禁用 BusyBox IPv6 支持
# CONFIG_BUSYBOX_CONFIG_FEATURE_IPV6 is not set

# 启用 BusyBox lsusb 命令
CONFIG_BUSYBOX_CONFIG_LSUSB=y

# 启用 CoreMark 多线程测试
CONFIG_COREMARK_ENABLE_MULTITHREADING=y

# 设置 CoreMark 测试线程数为 16
CONFIG_COREMARK_NUMBER_OF_THREADS=16

# 启用 CoreMark O3 优化
CONFIG_COREMARK_OPTIMIZE_O3=y

# 启用 Docker cgroup 选项
#CONFIG_DOCKER_CGROUP_OPTIONS=y

# 启用 Docker MACVLAN 网络支持
#CONFIG_DOCKER_NET_MACVLAN=y

# 启用 Docker 可选功能
#CONFIG_DOCKER_OPTIONAL_FEATURES=y

# 启用 Docker EXT4 存储支持
#CONFIG_DOCKER_STO_EXT4=y

# 启用 GnuTLS ALPN 扩展支持
CONFIG_GNUTLS_ALPN=y

# 启用 GnuTLS 匿名认证支持
CONFIG_GNUTLS_ANON=y

# 启用 GnuTLS DTLS SRTP 支持
CONFIG_GNUTLS_DTLS_SRTP=y

# 启用 GnuTLS 心跳扩展支持
CONFIG_GNUTLS_HEARTBEAT=y

# 启用 GnuTLS OCSP 支持
CONFIG_GNUTLS_OCSP=y

# 启用 GnuTLS PSK 支持
CONFIG_GNUTLS_PSK=y

# 禁用 IPQ 1024MB 内存配置文件
# CONFIG_IPQ_MEM_PROFILE_1024 is not set

# 启用 IPQ 512MB 内存配置文件
CONFIG_IPQ_MEM_PROFILE_512=y

# 启用 ARM 性能监控单元
CONFIG_KERNEL_ARM_PMU=y

# 启用 CFQ 组 IO 调度
CONFIG_KERNEL_CFQ_GROUP_IOSCHED=y

# 启用 CGROUP 设备控制
CONFIG_KERNEL_CGROUP_DEVICE=y

# 启用 CGROUP 进程冻结功能
CONFIG_KERNEL_CGROUP_FREEZER=y

# 启用 CGROUP HugeTLB 支持
CONFIG_KERNEL_CGROUP_HUGETLB=y

# 启用 CGROUP 网络优先级
CONFIG_KERNEL_CGROUP_NET_PRIO=y

# 启用 CGROUP 性能监控
CONFIG_KERNEL_CGROUP_PERF=y

# 启用 HugeTLB 文件系统
CONFIG_KERNEL_HUGETLBFS=y

# 启用 HugeTLB 页面支持
CONFIG_KERNEL_HUGETLB_PAGE=y

# 设置内核 IPQ 内存配置为 512MB
CONFIG_KERNEL_IPQ_MEM_PROFILE=512

# 启用内存控制组交换功能
CONFIG_KERNEL_MEMCG_SWAP_ENABLED=y

# 启用网络类别 CGROUP
CONFIG_KERNEL_NET_CLS_CGROUP=y

# 启用性能事件支持
CONFIG_KERNEL_PERF_EVENTS=y

# 启用透明大页支持
CONFIG_KERNEL_TRANSPARENT_HUGEPAGE=y

# 设置透明大页始终启用
CONFIG_KERNEL_TRANSPARENT_HUGEPAGE_ALWAYS=y

# 设置 ZRAM 后端压缩算法为 LZO
CONFIG_KERNEL_ZRAM_BACKEND_LZO=y

# 设置 ZRAM 默认压缩算法为 LZORLE
CONFIG_KERNEL_ZRAM_DEF_COMP_LZORLE=y

# 启用 libcurl Cookies 支持
CONFIG_LIBCURL_COOKIES=y

# 启用 libcurl 加密认证支持
CONFIG_LIBCURL_CRYPTO_AUTH=y

# 启用 libcurl 文件协议支持
CONFIG_LIBCURL_FILE=y

# 启用 libcurl FTP 协议支持
CONFIG_LIBCURL_FTP=y

# 启用 libcurl HTTP 协议支持
CONFIG_LIBCURL_HTTP=y

# 启用 libcurl NGHTTP2 支持
CONFIG_LIBCURL_NGHTTP2=y

# 启用 libcurl OpenSSL 支持
CONFIG_LIBCURL_OPENSSL=y

# 启用 libcurl 代理支持
CONFIG_LIBCURL_PROXY=y

# 启用 libcurl TFTP 协议支持
CONFIG_LIBCURL_TFTP=y

# 启用 libcurl 线程解析器
CONFIG_LIBCURL_THREADED_RESOLVER=y

# 启用 libcurl TLS SRP 支持
CONFIG_LIBCURL_TLS_SRP=y

# 启用 libcurl Unix 套接字支持
CONFIG_LIBCURL_UNIX_SOCKETS=y

# 启用 LuCI 中文简体语言包
CONFIG_LUCI_LANG_zh_Hans=y

# 启用 NSS 驱动 IGS 功能
CONFIG_NSS_DRV_IGS_ENABLE=y

# 启用 NSS 驱动 L2TP 功能
CONFIG_NSS_DRV_L2TP_ENABLE=y

# 启用 NSS 驱动 LAG 功能
CONFIG_NSS_DRV_LAG_ENABLE=y

# 启用 NSS 驱动 MAPT 功能
CONFIG_NSS_DRV_MAPT_ENABLE=y

# 启用 NSS 驱动 PPTP 功能
CONFIG_NSS_DRV_PPTP_ENABLE=y

# 启用 NSS 驱动 PVXLAN 功能
CONFIG_NSS_DRV_PVXLAN_ENABLE=y

# 启用 NSS 驱动流量整形功能
CONFIG_NSS_DRV_SHAPER_ENABLE=y

# 启用 NSS 驱动 VXLAN 功能
CONFIG_NSS_DRV_VXLAN_ENABLE=y

# 启用 NSS 固件版本 12.2
CONFIG_NSS_FIRMWARE_VERSION_12_2=y

# 禁用 NSS 固件版本 12.5
# CONFIG_NSS_FIRMWARE_VERSION_12_5 is not set

# 启用 6rd 包
CONFIG_PACKAGE_6rd=y

# 以模块形式启用 attr 包
CONFIG_PACKAGE_attr=m

# 以模块形式启用 avahi-dbus-daemon 包
CONFIG_PACKAGE_avahi-dbus-daemon=m

# 启用 block-mount 包（存储挂载管理）
CONFIG_PACKAGE_block-mount=y

# 以模块形式启用 boost 库
CONFIG_PACKAGE_boost=m

# 以模块形式启用 boost-program_options 库
CONFIG_PACKAGE_boost-program_options=m

# 以模块形式启用 boost-system 库
CONFIG_PACKAGE_boost-system=m

# 以模块形式启用 btrfs-progs 包
CONFIG_PACKAGE_btrfs-progs=m

# 启用 ca-certificates 包（SSL证书）
CONFIG_PACKAGE_ca-certificates=m

# 启用 cgi-io 包
CONFIG_PACKAGE_cgi-io=y

# 以模块形式启用 cgroupfs-mount 包
CONFIG_PACKAGE_cgroupfs-mount=m

# 启用 chinadns-ng 包（DNS解析工具）
CONFIG_PACKAGE_chinadns-ng=m

# 以模块形式启用 containerd 包（容器运行时）
#CONFIG_PACKAGE_containerd=m

# 启用 coremark 包（CPU性能测试）
CONFIG_PACKAGE_coremark=y

# 以模块形式启用 coreutils 包
CONFIG_PACKAGE_coreutils=m

# 以模块形式启用 coreutils-base64 包
CONFIG_PACKAGE_coreutils-base64=m

# 以模块形式启用 coreutils-nohup 包
CONFIG_PACKAGE_coreutils-nohup=m

# 以模块形式启用 curl 包
CONFIG_PACKAGE_curl=m

# 以模块形式启用 dbus 包
CONFIG_PACKAGE_dbus=m

# 启用 ddns-scripts 包（动态DNS脚本）
CONFIG_PACKAGE_ddns-scripts=y

# 启用 ddns-scripts-services 包
CONFIG_PACKAGE_ddns-scripts-services=y

# 启用 default-settings 包（默认设置）
CONFIG_PACKAGE_default-settings=y

# 启用 default-settings-chn 包（中文默认设置）
CONFIG_PACKAGE_default-settings-chn=y

# 以模块形式启用 dns2socks 包
CONFIG_PACKAGE_dns2socks=m

# 以模块形式启用 dns2tcp 包
CONFIG_PACKAGE_dns2tcp=m

# 以模块形式启用 docker 包
#CONFIG_PACKAGE_docker=m

# 以模块形式启用 docker-compose 包
#CONFIG_PACKAGE_docker-compose=m

# 以模块形式启用 dockerd 包
#CONFIG_PACKAGE_dockerd=m

# 启用 etherwake 包（网络唤醒工具）
CONFIG_PACKAGE_etherwake=y

# 以模块形式启用 firewall 包
CONFIG_PACKAGE_firewall=m

# 以模块形式启用 geoview 包
CONFIG_PACKAGE_geoview=m

# 启用 hysteria 包（网络代理工具）
CONFIG_PACKAGE_hysteria=m

# 以模块形式启用 ip-full 包
CONFIG_PACKAGE_ip-full=m

# 启用 ip-tiny 包
CONFIG_PACKAGE_ip-tiny=y

# 以模块形式启用 ip6tables-nft 包
CONFIG_PACKAGE_ip6tables-nft=m

# 启用 iperf3 包（网络性能测试）
CONFIG_PACKAGE_iperf3=y

# 以模块形式启用 ipt2socks 包
CONFIG_PACKAGE_ipt2socks=m

# 以模块形式启用 iptables-mod-extra 包
CONFIG_PACKAGE_iptables-mod-extra=m

# 启用 iptables-mod-fullconenat 包（全锥形NAT）
CONFIG_PACKAGE_iptables-mod-fullconenat=y

# 以模块形式启用 iptables-mod-ipopt 包
CONFIG_PACKAGE_iptables-mod-ipopt=y

# 启用 iptables-nft 包
CONFIG_PACKAGE_iptables-nft=y

# 启用 kmod-bonding 内核模块（网络绑定）
CONFIG_PACKAGE_kmod-bonding=y

# 以模块形式启用 kmod-br-netfilter 内核模块
CONFIG_PACKAGE_kmod-br-netfilter=m

# 以模块形式启用 kmod-crypto-acompress 内核模块
CONFIG_PACKAGE_kmod-crypto-acompress=y

# 以模块形式启用 kmod-crypto-blake2b 内核模块
CONFIG_PACKAGE_kmod-crypto-blake2b=m

# 启用 kmod-crypto-crc32 内核模块
CONFIG_PACKAGE_kmod-crypto-crc32=y

# 启用 kmod-crypto-lib-chacha20 内核模块
CONFIG_PACKAGE_kmod-crypto-lib-chacha20=y

# 启用 kmod-crypto-lib-chacha20poly1305 内核模块
CONFIG_PACKAGE_kmod-crypto-lib-chacha20poly1305=y

# 启用 kmod-crypto-lib-curve25519 内核模块
CONFIG_PACKAGE_kmod-crypto-lib-curve25519=y

# 启用 kmod-crypto-lib-poly1305 内核模块
CONFIG_PACKAGE_kmod-crypto-lib-poly1305=y

# 以模块形式启用 kmod-crypto-xxhash 内核模块
CONFIG_PACKAGE_kmod-crypto-xxhash=m

# 以模块形式启用 kmod-dummy 内核模块
CONFIG_PACKAGE_kmod-dummy=m

# 以模块形式启用 kmod-fs-btrfs 内核模块
CONFIG_PACKAGE_kmod-fs-btrfs=m

# 启用 kmod-fs-exportfs 内核模块
CONFIG_PACKAGE_kmod-fs-exportfs=y

# 启用 kmod-fs-f2fs 内核模块
CONFIG_PACKAGE_kmod-fs-f2fs=y

# 启用 kmod-fs-ntfs3 内核模块
CONFIG_PACKAGE_kmod-fs-ntfs3=y

# 启用 kmod-fs-vfat 内核模块
CONFIG_PACKAGE_kmod-fs-vfat=y

# 以模块形式启用 kmod-fs-xfs 内核模块
CONFIG_PACKAGE_kmod-fs-xfs=y

# 启用 kmod-gre6 内核模块
CONFIG_PACKAGE_kmod-gre6=y

# 启用 kmod-ifb 内核模块
CONFIG_PACKAGE_kmod-ifb=y

# 启用 kmod-inet-diag 内核模块
CONFIG_PACKAGE_kmod-inet-diag=y

# 启用 kmod-ip6-tunnel 内核模块
CONFIG_PACKAGE_kmod-ip6-tunnel=y

# 以模块形式启用 kmod-ip6tables 内核模块
CONFIG_PACKAGE_kmod-ip6tables=m

# 启用 kmod-ipt-conntrack 内核模块
CONFIG_PACKAGE_kmod-ipt-conntrack=y

# 启用 kmod-ipt-core 内核模块
CONFIG_PACKAGE_kmod-ipt-core=y

# 以模块形式启用 kmod-ipt-extra 内核模块
CONFIG_PACKAGE_kmod-ipt-extra=m

# 启用 kmod-ipt-fullconenat 内核模块
CONFIG_PACKAGE_kmod-ipt-fullconenat=y

# 以模块形式启用 kmod-ipt-ipopt 内核模块
CONFIG_PACKAGE_kmod-ipt-ipopt=y

# 启用 kmod-ipt-ipset 内核模块
CONFIG_PACKAGE_kmod-ipt-ipset=y

# 启用 kmod-ipt-nat 内核模块
CONFIG_PACKAGE_kmod-ipt-nat=y

# 以模块形式启用 kmod-ipt-nat6 内核模块
CONFIG_PACKAGE_kmod-ipt-nat6=m

# 启用 kmod-ipt-physdev 内核模块
CONFIG_PACKAGE_kmod-ipt-physdev=m

# 启用 kmod-iptunnel4 内核模块
CONFIG_PACKAGE_kmod-iptunnel4=y

# 启用 kmod-iptunnel6 内核模块
CONFIG_PACKAGE_kmod-iptunnel6=y

# 启用 kmod-lib-lzo 内核模块
CONFIG_PACKAGE_kmod-lib-lzo=y

# 以模块形式启用 kmod-lib-raid6 内核模块
CONFIG_PACKAGE_kmod-lib-raid6=m

# 启用 kmod-lib-xor 内核模块
CONFIG_PACKAGE_kmod-lib-xor=m

# 以模块形式启用 kmod-lib-xxhash 内核模块
CONFIG_PACKAGE_kmod-lib-xxhash=m

# 启用 kmod-lib-zlib-deflate 内核模块
CONFIG_PACKAGE_kmod-lib-zlib-deflate=m

# 启用 kmod-lib-zlib-inflate 内核模块
CONFIG_PACKAGE_kmod-lib-zlib-inflate=m

# 启用 kmod-lib-zstd 内核模块
CONFIG_PACKAGE_kmod-lib-zstd=m

# 以模块形式启用 kmod-macvlan 内核模块
CONFIG_PACKAGE_kmod-macvlan=m

# 启用 kmod-nat46 内核模块
CONFIG_PACKAGE_kmod-nat46=y

# 启用 kmod-netlink-diag 内核模块
CONFIG_PACKAGE_kmod-netlink-diag=y

# 启用 kmod-nf-ipt 内核模块
CONFIG_PACKAGE_kmod-nf-ipt=y

# 以模块形式启用 kmod-nf-ipt6 内核模块
CONFIG_PACKAGE_kmod-nf-ipt6=m

# 以模块形式启用 kmod-nf-ipvs 内核模块
CONFIG_PACKAGE_kmod-nf-ipvs=m

# 以模块形式启用 kmod-nf-nat6 内核模块
CONFIG_PACKAGE_kmod-nf-nat6=m

# 启用 kmod-nf-socket 内核模块
CONFIG_PACKAGE_kmod-nf-socket=y

# 启用 kmod-nf-tproxy 内核模块
CONFIG_PACKAGE_kmod-nf-tproxy=y

# 启用 kmod-nft-compat 内核模块
CONFIG_PACKAGE_kmod-nft-compat=y

# 启用 kmod-nft-socket 内核模块
CONFIG_PACKAGE_kmod-nft-socket=y

# 启用 kmod-nft-tproxy 内核模块
CONFIG_PACKAGE_kmod-nft-tproxy=y

# 启用 kmod-nls-cp437 内核模块（字符集支持）
CONFIG_PACKAGE_kmod-nls-cp437=y

# 启用 kmod-nls-iso8859-1 内核模块（字符集支持）
CONFIG_PACKAGE_kmod-nls-iso8859-1=y

# 启用 kmod-nls-utf8 内核模块（字符集支持）
CONFIG_PACKAGE_kmod-nls-utf8=y

# 启用 kmod-qca-mcs 内核模块
CONFIG_PACKAGE_kmod-qca-mcs=y

# 启用 kmod-qca-nss-drv-igs 内核模块
CONFIG_PACKAGE_kmod-qca-nss-drv-igs=y

# 启用 kmod-qca-nss-drv-l2tpv2 内核模块
CONFIG_PACKAGE_kmod-qca-nss-drv-l2tpv2=y

# 启用 kmod-qca-nss-drv-lag-mgr 内核模块
CONFIG_PACKAGE_kmod-qca-nss-drv-lag-mgr=y

# 启用 kmod-qca-nss-drv-map-t 内核模块
CONFIG_PACKAGE_kmod-qca-nss-drv-map-t=y

# 启用 kmod-qca-nss-drv-pppoe 内核模块
CONFIG_PACKAGE_kmod-qca-nss-drv-pppoe=y

# 启用 kmod-qca-nss-drv-pptp 内核模块
CONFIG_PACKAGE_kmod-qca-nss-drv-pptp=y

# 启用 kmod-qca-nss-drv-qdisc 内核模块
CONFIG_PACKAGE_kmod-qca-nss-drv-qdisc=y

# 启用 kmod-qca-nss-macsec 内核模块
CONFIG_PACKAGE_kmod-qca-nss-macsec=y

# 启用 kmod-sched-cake 内核模块（网络调度）
CONFIG_PACKAGE_kmod-sched-cake=y

# 启用 kmod-sched-core 内核模块（网络调度）
CONFIG_PACKAGE_kmod-sched-core=y

# 启用 kmod-scsi-core 内核模块
CONFIG_PACKAGE_kmod-scsi-core=y

# 启用 kmod-sit 内核模块
CONFIG_PACKAGE_kmod-sit=y

# 启用 kmod-tun 内核模块
CONFIG_PACKAGE_kmod-tun=y

# 启用 kmod-usb-dwc2 内核模块
CONFIG_PACKAGE_kmod-usb-dwc2=y

# 启用 kmod-usb-dwc2-pci 内核模块
CONFIG_PACKAGE_kmod-usb-dwc2-pci=y

# 启用 kmod-usb-ehci 内核模块
CONFIG_PACKAGE_kmod-usb-ehci=y

# 启用 kmod-usb-ohci 内核模块
CONFIG_PACKAGE_kmod-usb-ohci=y

# 启用 kmod-usb-ohci-pci 内核模块
CONFIG_PACKAGE_kmod-usb-ohci-pci=y

# 启用 kmod-usb-phy-nop 内核模块
CONFIG_PACKAGE_kmod-usb-phy-nop=y

# 启用 kmod-usb-roles 内核模块
CONFIG_PACKAGE_kmod-usb-roles=y

# 启用 kmod-usb-serial 内核模块
CONFIG_PACKAGE_kmod-usb-serial=y

# 启用 kmod-usb-serial-qualcomm 内核模块
CONFIG_PACKAGE_kmod-usb-serial-qualcomm=y

# 启用 kmod-usb-serial-wwan 内核模块
CONFIG_PACKAGE_kmod-usb-serial-wwan=y

# 启用 kmod-usb-storage 内核模块
CONFIG_PACKAGE_kmod-usb-storage=y

# 启用 kmod-usb-storage-extras 内核模块
CONFIG_PACKAGE_kmod-usb-storage-extras=y

# 启用 kmod-usb-uhci 内核模块
CONFIG_PACKAGE_kmod-usb-uhci=y

# 启用 kmod-usb2 内核模块
CONFIG_PACKAGE_kmod-usb2=y

# 启用 kmod-usb2-pci 内核模块
CONFIG_PACKAGE_kmod-usb2-pci=y

# 以模块形式启用 kmod-veth 内核模块
CONFIG_PACKAGE_kmod-veth=m

# 启用 kmod-vxlan 内核模块
CONFIG_PACKAGE_kmod-vxlan=y

# 启用 kmod-wireguard 内核模块
CONFIG_PACKAGE_kmod-wireguard=y

# 启用 kmod-zram 内核模块
CONFIG_PACKAGE_kmod-zram=y

# 启用 libatomic 库
CONFIG_PACKAGE_libatomic=y

# 以模块形式启用 libattr 库
CONFIG_PACKAGE_libattr=m

# 以模块形式启用 libavahi-client 库
CONFIG_PACKAGE_libavahi-client=m

# 以模块形式启用 libavahi-dbus-support 库
CONFIG_PACKAGE_libavahi-dbus-support=m

# 以模块形式启用 libbpf 库
CONFIG_PACKAGE_libbpf=m

# 启用 libcap 库
CONFIG_PACKAGE_libcap=y

# 启用 libcap-ng 库
CONFIG_PACKAGE_libcap-ng=y

# 以模块形式启用 libcurl 库
CONFIG_PACKAGE_libcurl=m

# 以模块形式启用 libdaemon 库
CONFIG_PACKAGE_libdaemon=m

# 以模块形式启用 libdbus 库
CONFIG_PACKAGE_libdbus=m

# 以模块形式启用 libelf 库
CONFIG_PACKAGE_libelf=m

# 以模块形式启用 libexpat 库
CONFIG_PACKAGE_libexpat=m

# 以模块形式启用 libgnutls 库
CONFIG_PACKAGE_libgnutls=m

# 启用 libip4tc 库
CONFIG_PACKAGE_libip4tc=y

# 启用 libip6tc 库
CONFIG_PACKAGE_libip6tc=y

# 启用 libiperf3 库
CONFIG_PACKAGE_libiperf3=y

# 启用 libiptext 库
CONFIG_PACKAGE_libiptext=y

# 启用 libiptext-nft 库
CONFIG_PACKAGE_libiptext-nft=y

# 启用 libiptext6 库
CONFIG_PACKAGE_libiptext6=y

# 启用 liblua 库
CONFIG_PACKAGE_liblua=y

# 启用 liblucihttp 库
CONFIG_PACKAGE_liblucihttp=y

# 启用 liblucihttp-lua 库
CONFIG_PACKAGE_liblucihttp-lua=y

# 启用 liblucihttp-ucode 库
CONFIG_PACKAGE_liblucihttp-ucode=y

# 以模块形式启用 liblzo 库
CONFIG_PACKAGE_liblzo=m

# 启用 libminiupnpc 库
CONFIG_PACKAGE_libminiupnpc=y

# 以模块形式启用 libmount 库
CONFIG_PACKAGE_libmount=m

# 启用 libnatpmp 库
CONFIG_PACKAGE_libnatpmp=y

# 以模块形式启用 libnghttp2 库
CONFIG_PACKAGE_libnghttp2=m

# 以模块形式启用 libpopt 库
CONFIG_PACKAGE_libpopt=m

# 以模块形式启用 libreadline 库
CONFIG_PACKAGE_libreadline=m

# 以模块形式启用 libseccomp 库
CONFIG_PACKAGE_libseccomp=m

# 启用 libstdcpp 库
CONFIG_PACKAGE_libstdcpp=y

# 以模块形式启用 libtasn1 库
CONFIG_PACKAGE_libtasn1=m

# 以模块形式启用 libtirpc 库
CONFIG_PACKAGE_libtirpc=m

# 启用 libubus-lua 库
CONFIG_PACKAGE_libubus-lua=y

# 启用 libuci-lua 库
CONFIG_PACKAGE_libuci-lua=m

# 启用 liburing 库
CONFIG_PACKAGE_liburing=m

# 启用 libuv 库
CONFIG_PACKAGE_libuv=y

# 启用 libwebsockets-full 库
CONFIG_PACKAGE_libwebsockets-full=y

# 启用 libxtables 库
CONFIG_PACKAGE_libxtables=y

# 启用 lua 解释器
CONFIG_PACKAGE_lua=y

# 启用 LuCI Web 界面
CONFIG_PACKAGE_luci=y

# 启用 luci-app-argon-config 包（Argon主题配置）
CONFIG_PACKAGE_luci-app-argon-config=y

# 启用 luci-app-ddns 包（动态DNS配置界面）
CONFIG_PACKAGE_luci-app-ddns=y

# 以模块形式启用 luci-app-dockerman 包（Docker管理界面）
#CONFIG_PACKAGE_luci-app-dockerman=m

# 启用 luci-app-firewall 包（防火墙配置界面）
CONFIG_PACKAGE_luci-app-firewall=y

# 启用 luci-app-homeproxy 包（家庭代理配置界面）
CONFIG_PACKAGE_luci-app-homeproxy=y

# 启用 luci-app-netspeedtest 包（网络速度测试界面）
CONFIG_PACKAGE_luci-app-netspeedtest=y

# 启用 luci-app-package-manager 包（软件包管理界面）
CONFIG_PACKAGE_luci-app-package-manager=y

# 以模块形式启用 luci-app-passwall 包（PassWall代理配置界面）
#CONFIG_PACKAGE_luci-app-passwall=m

# 禁用 PassWall 中的 Haproxy 组件
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy is not set

# 禁用 PassWall 中的 Shadowsocks Rust 客户端
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client is not set

# 禁用 PassWall 中的 Shadowsocks Rust 服务器
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server is not set

# 禁用 PassWall 中的 Simple_Obfs 组件
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs is not set

# 禁用 PassWall 中的 Trojan_Plus 组件
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus is not set

# 禁用 PassWall 中的 V2ray_Geoview 组件
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Geoview is not set

# 禁用 PassWall 中的 V2ray_Plugin 组件
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin is not set

# 禁用 PassWall 中的 Xray 组件
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray is not set

# 以模块形式启用 luci-app-samba4 包（Samba网络共享配置界面）
CONFIG_PACKAGE_luci-app-samba4=m

# 启用 luci-app-sqm 包（Smart Queue Management配置界面）
CONFIG_PACKAGE_luci-app-sqm=y

# 启用 luci-app-ttyd 包（Web终端配置界面）
CONFIG_PACKAGE_luci-app-ttyd=y

# 启用 luci-app-upnp 包（UPnP配置界面）
CONFIG_PACKAGE_luci-app-upnp=y

# 启用 luci-app-wol 包（网络唤醒配置界面）
#CONFIG_PACKAGE_luci-app-wol=y

# 启用 luci-app-zerotier 包（ZeroTier配置界面）
#CONFIG_PACKAGE_luci-app-zerotier=y

# 以模块形式启用 luci-app-athena-led 包
CONFIG_PACKAGE_luci-app-athena-led=m

# 启用 luci-base 包（LuCI基础组件）
CONFIG_PACKAGE_luci-base=y

# 启用 luci-compat 包（LuCI兼容层）
CONFIG_PACKAGE_luci-compat=y

# 以模块形式启用 luci-i18n-athena-led-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-athena-led-zh-cn=m

# 启用 luci-i18n-argon-config-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-argon-config-zh-cn=y

# 启用 luci-i18n-base-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-base-zh-cn=y

# 启用 luci-i18n-ddns-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-ddns-zh-cn=y

# 以模块形式启用 luci-i18n-dockerman-zh-cn 包（中文翻译）
#CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=m

# 启用 luci-i18n-firewall-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y

# 启用 luci-i18n-homeproxy-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-homeproxy-zh-cn=y

# 启用 luci-i18n-package-manager-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-package-manager-zh-cn=y

# 以模块形式启用 luci-i18n-passwall-zh-cn 包（中文翻译）
#CONFIG_PACKAGE_luci-i18n-passwall-zh-cn=m

# 以模块形式启用 luci-i18n-samba4-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-samba4-zh-cn=m

# 启用 luci-i18n-sqm-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-sqm-zh-cn=y

# 启用 luci-i18n-ttyd-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-ttyd-zh-cn=y

# 启用 luci-i18n-upnp-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-upnp-zh-cn=y

# 启用 luci-i18n-wol-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-wol-zh-cn=y

# 启用 luci-i18n-zerotier-zh-cn 包（中文翻译）
CONFIG_PACKAGE_luci-i18n-zerotier-zh-cn=y

# 启用 luci-lib-base 包（LuCI基础库）
CONFIG_PACKAGE_luci-lib-base=y

# 以模块形式启用 luci-lib-docker 包
#CONFIG_PACKAGE_luci-lib-docker=m

# 启用 luci-lib-ip 包（IP地址处理库）
CONFIG_PACKAGE_luci-lib-ip=y

# 启用 luci-lib-jsonc 包（JSON处理库）
CONFIG_PACKAGE_luci-lib-jsonc=y

# 启用 luci-lib-nixio 包（网络IO库）
CONFIG_PACKAGE_luci-lib-nixio=y

# 启用 luci-light 包（轻量级LuCI）
CONFIG_PACKAGE_luci-light=y

# 启用 luci-lua-runtime 包（Lua运行时）
CONFIG_PACKAGE_luci-lua-runtime=y

# 启用 luci-mod-admin-full 包（完整管理模块）
CONFIG_PACKAGE_luci-mod-admin-full=y

# 启用 luci-mod-network 包（网络配置模块）
CONFIG_PACKAGE_luci-mod-network=y

# 启用 luci-mod-status 包（状态信息模块）
CONFIG_PACKAGE_luci-mod-status=y

# 启用 luci-mod-system 包（系统配置模块）
CONFIG_PACKAGE_luci-mod-system=y

# 启用 luci-proto-ipv6 包（IPv6协议支持）
CONFIG_PACKAGE_luci-proto-ipv6=y

# 启用 luci-proto-ppp 包（PPP协议支持）
CONFIG_PACKAGE_luci-proto-ppp=y

# 启用 luci-theme-argon 包（Argon主题）
CONFIG_PACKAGE_luci-theme-argon=y

# 启用 luci-theme-bootstrap 包（Bootstrap主题）
CONFIG_PACKAGE_luci-theme-bootstrap=y

# 以模块形式启用 microsocks 包（轻量级SOCKS5代理）
CONFIG_PACKAGE_microsocks=m

# 启用 miniupnpd-nftables 包
CONFIG_PACKAGE_miniupnpd-nftables=y

# 以模块形式启用 mount-utils 包
CONFIG_PACKAGE_mount-utils=m

# 启用 resolveip 包
CONFIG_PACKAGE_resolveip=m

# 启用 rpcd 包（RPC服务守护进程）
CONFIG_PACKAGE_rpcd=y

# 启用 rpcd-mod-file 包（文件操作模块）
CONFIG_PACKAGE_rpcd-mod-file=y

# 启用 rpcd-mod-iwinfo 包（无线信息模块）
CONFIG_PACKAGE_rpcd-mod-iwinfo=y

# 启用 rpcd-mod-luci 包（LuCI模块）
CONFIG_PACKAGE_rpcd-mod-luci=y

# 启用 rpcd-mod-rrdns 包（反向DNS模块）
CONFIG_PACKAGE_rpcd-mod-rrdns=y

# 启用 rpcd-mod-ucode 包（ucode模块）
CONFIG_PACKAGE_rpcd-mod-ucode=y

# 以模块形式启用 runc 包（容器运行时）
#CONFIG_PACKAGE_runc=m

# 以模块形式启用 samba4-libs 包
CONFIG_PACKAGE_samba4-libs=m

# 以模块形式启用 samba4-server 包
CONFIG_PACKAGE_samba4-server=m

# 启用 sing-box 包（通用代理平台）
CONFIG_PACKAGE_sing-box=y

# 启用 sqm-scripts 包
CONFIG_PACKAGE_sqm-scripts=y

# 启用 tc-tiny 包
CONFIG_PACKAGE_tc-tiny=y

# 以模块形式启用 tcping 包
CONFIG_PACKAGE_tcping=m

# 以模块形式启用 tini 包
CONFIG_PACKAGE_tini=m

# 启用 ttyd 包（Web终端服务）
CONFIG_PACKAGE_ttyd=y

# 启用 ucode-mod-html 包
CONFIG_PACKAGE_ucode-mod-html=y

# 启用 ucode-mod-lua 包
CONFIG_PACKAGE_ucode-mod-lua=y

# 启用 ucode-mod-math 包
CONFIG_PACKAGE_ucode-mod-math=y

# 启用 uhttpd 包（Web服务器）
CONFIG_PACKAGE_uhttpd=y

# 启用 uhttpd-mod-ubus 包（ubus模块）
CONFIG_PACKAGE_uhttpd-mod-ubus=y

# 以模块形式启用 unzip 包
CONFIG_PACKAGE_unzip=m

# 以模块形式启用 wpad-basic-mbedtls 包（WiFi认证）
CONFIG_PACKAGE_wpad-basic-mbedtls=m

# 以模块形式启用 wsdd2 包（Web服务发现守护进程）
CONFIG_PACKAGE_wsdd2=m

# 以模块形式启用 xray-core 包（Xray代理核心）
CONFIG_PACKAGE_xray-core=m

# 启用 xtables-nft 包
CONFIG_PACKAGE_xtables-nft=y

# 启用 zerotier 包（虚拟网络）
#CONFIG_PACKAGE_zerotier=y

# 启用 zram-swap 包
CONFIG_PACKAGE_zram-swap=y

# 启用 SAMBA4 服务器 Avahi 支持
CONFIG_SAMBA4_SERVER_AVAHI=y

# 启用 SAMBA4 服务器 NetBIOS 支持
CONFIG_SAMBA4_SERVER_NETBIOS=y

# 启用 SAMBA4 服务器 VFS 支持
CONFIG_SAMBA4_SERVER_VFS=y

# 启用 SAMBA4 服务器 WSDD2 支持
CONFIG_SAMBA4_SERVER_WSDD2=y

# 启用 Sing-Box ACME 支持
#CONFIG_SING_BOX_BUILD_ACME=y

# 启用 Sing-Box Clash API 支持
#CONFIG_SING_BOX_BUILD_CLASH_API=y

# 启用 Sing-Box ECH 支持
#CONFIG_SING_BOX_BUILD_ECH=y

# 启用 Sing-Box gVisor 支持
#CONFIG_SING_BOX_BUILD_GVISOR=y

# 启用 Sing-Box QUIC 支持
#CONFIG_SING_BOX_BUILD_QUIC=y

# 启用 Sing-Box Reality 服务器支持
#CONFIG_SING_BOX_BUILD_REALITY_SERVER=y

# 启用 Sing-Box uTLS 支持
#CONFIG_SING_BOX_BUILD_UTLS=y

# 启用 Sing-Box WireGuard 支持
#CONFIG_SING_BOX_BUILD_WIREGUARD=y

# 禁用目标根文件系统 initramfs
# CONFIG_TARGET_ROOTFS_INITRAMFS is not set

# 启用 Boost 库编译可见性隐藏
CONFIG_boost-compile-visibility-hidden=y

# 启用 Boost 库运行时共享库
CONFIG_boost-runtime-shared=y

# 启用 Boost 静态和共享库
CONFIG_boost-static-and-shared-libs=y

# 设置 Boost 变体为发布版
CONFIG_boost-variant-release=y

# 禁用 kmod-crypto-kpp 内核模块
# CONFIG_PACKAGE_kmod-crypto-kpp is not set